{"version":3,"sources":["components/gameComponents/Turret/index.tsx","components/gameComponents/GameBoard/index.tsx","components/gameComponents/GameMenu/index.tsx","pages/Game/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Turret","props","useState","radius","setFocusedEnemy","focusedEnemyRef","useRef","stopId","angle","setAngle","turret","useEffect","document","addEventListener","e","console","log","clientX","clientY","isGameActive","beginCheckingForEnemies","current","checkForEnemy","checkForEnemyInterval","setInterval","clearInterval","enemy","getEnemyAndTurretData","canSeeEnemy","enemyX","enemyY","turretX","turretY","deltaX","deltaY","animateTurret","window","requestAnimationFrame","step","timestamp","squaredDistanceBetween","stopAnimation","angleDegrees","calculateTurretAngle","cancelAnimationFrame","angleRadians","Math","atan","radiansToDegrees","abs","PI","getBoundingClientRect","enemyRect","turretRect","x","y","className","ref","style","transform","width","height","GameBoard","squares","setSquares","testEnemy","mySquares","i","push","map","square","GameMenu","Game","setIsGameActive","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.81a662d4.chunk.js","sourcesContent":["import React, { ReactElement, useState, useRef, useEffect, RefObject } from 'react'\r\nimport './index.scss'\r\n\r\ninterface Props {\r\n    enemy: RefObject<HTMLDivElement>;\r\n    isGameActive: boolean;\r\n}\r\n\r\nexport default function Turret(props: Props): ReactElement {\r\n    const [radius, setRadius] = useState<number>(350);\r\n    const [focusedEnemy, setFocusedEnemy] = useState<HTMLDivElement | null>(null);\r\n    const focusedEnemyRef = useRef<HTMLDivElement | null>(null)\r\n    const [isAnimating, setIsAnimating] = useState<boolean>(false)\r\n    const [start, setStart] = useState(null);\r\n    const stopId = useRef<number | null>(null); // animation stop id\r\n    // const [progress, setProgress] = useState<number>(0);\r\n    const [angle, setAngle] = useState(0);\r\n\r\n    const turret = useRef<HTMLDivElement | null>(null)\r\n\r\n    useEffect(() => {\r\n        // window.requestAnimationFrame(step);\r\n        document.addEventListener('click', e => {\r\n            console.log(e.clientX, e.clientY)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (props.isGameActive) {\r\n            beginCheckingForEnemies();\r\n        }\r\n    }, [props.isGameActive])\r\n\r\n    const beginCheckingForEnemies = () => {\r\n        if (!props.isGameActive || focusedEnemyRef.current) return\r\n        console.log('being interval')\r\n\r\n        checkForEnemy();\r\n\r\n        const checkForEnemyInterval = setInterval(() => {\r\n            if (focusedEnemyRef.current) {\r\n                console.log('clearing interval')\r\n                clearInterval(checkForEnemyInterval);\r\n                return\r\n            }\r\n            checkForEnemy();\r\n        }, 100)\r\n    }\r\n\r\n    const checkForEnemy = () => {\r\n        const enemy = props.enemy.current\r\n\r\n        if (!enemy || !turret.current) return\r\n\r\n        const { enemyX, enemyY, turretX, turretY, deltaX, deltaY, canSeeEnemy } = getEnemyAndTurretData(enemy, turret.current)\r\n\r\n        console.log(canSeeEnemy)\r\n        if (canSeeEnemy) {\r\n            focusedEnemyRef.current = enemy\r\n            animateTurret();\r\n        }\r\n    }\r\n\r\n    const animateTurret = () => {\r\n        window.requestAnimationFrame(step);\r\n    }\r\n\r\n    const step = (timestamp: DOMHighResTimeStamp) => {\r\n        if (!turret.current || !focusedEnemyRef.current) return\r\n\r\n        const { canSeeEnemy, deltaX, deltaY, squaredDistanceBetween, enemyY, turretY, enemyX, turretX } = getEnemyAndTurretData(focusedEnemyRef.current, turret.current)\r\n\r\n        if (!canSeeEnemy) {\r\n            setFocusedEnemy(null);\r\n            stopAnimation();\r\n            return\r\n        }\r\n\r\n        let angleDegrees = calculateTurretAngle(enemyX, enemyY, turretX, turretY, deltaX, deltaY);\r\n\r\n        if (angleDegrees) setAngle(angleDegrees);\r\n\r\n        stopId.current = window.requestAnimationFrame(step);\r\n    }\r\n\r\n    const stopAnimation = () => {\r\n        if (stopId.current) {\r\n            window.cancelAnimationFrame(stopId.current);\r\n        }\r\n    }\r\n\r\n    const calculateTurretAngle = (enemyX: number, enemyY: number, turretX: number, turretY: number, deltaX: number, deltaY: number) => {\r\n        let angleRadians\r\n        let angleDegrees\r\n\r\n        // basend on which quadrant of the unit circle the enemy is in, add the appropriate amount of degrees to the angle\r\n        if (enemyX > turretX && enemyY < turretY) {\r\n            angleRadians = Math.atan(deltaX / deltaY)\r\n            angleDegrees = radiansToDegrees(angleRadians)\r\n        } else if (enemyX > turretX && enemyY > turretY) {\r\n            angleRadians = Math.atan(deltaY / deltaX)\r\n            angleDegrees = radiansToDegrees(angleRadians) + 90\r\n        } else if (enemyX < turretX && enemyY > turretY) {\r\n            angleRadians = Math.atan(deltaX / deltaY)\r\n            angleDegrees = radiansToDegrees(angleRadians) + 180\r\n        } else if (enemyX < turretX && enemyY < turretY) {\r\n            angleRadians = Math.atan(deltaY / deltaX)\r\n            angleDegrees = radiansToDegrees(angleRadians) + 270\r\n        }\r\n        \r\n        return angleDegrees\r\n    }\r\n    \r\n    const radiansToDegrees = (angle: number) => {\r\n        return Math.abs(angle) * (180 / Math.PI);\r\n    }\r\n\r\n    const getEnemyAndTurretData = (enemy: HTMLDivElement, turret: HTMLDivElement) => {\r\n        console.log(enemy.getBoundingClientRect())\r\n        const enemyRect = enemy.getBoundingClientRect()\r\n        const turretRect = turret.getBoundingClientRect()\r\n        const enemyX = enemyRect.x;\r\n        const enemyY = enemyRect.y;\r\n        const turretX = turretRect.x;\r\n        const turretY = turretRect.y;\r\n\r\n        const deltaY = enemyY - turretY;\r\n        const deltaX = enemyX - turretX;\r\n\r\n        // a^2 + b^2 without taking sqr root for performance\r\n        const squaredDistanceBetween = (deltaY * deltaY) + (deltaX * deltaX)\r\n        const canSeeEnemy = (radius * radius) >= squaredDistanceBetween\r\n\r\n        return {\r\n            enemyX: enemyX, \r\n            enemyY: enemyY, \r\n            turretX: turretX, \r\n            turretY: turretY, \r\n            deltaY: deltaY, \r\n            deltaX: deltaX,\r\n            squaredDistanceBetween: squaredDistanceBetween,\r\n            canSeeEnemy: canSeeEnemy\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='turret' ref={turret} style={{ transform: `rotate(${angle}deg)` }}>\r\n            <div className='point'></div>\r\n            <div className='radius-circle' style={{ width: radius * 2, height: radius * 2 }}></div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState, useEffect, useRef } from 'react'\r\nimport { GamePath } from '../../index'\r\nimport Turret from '../Turret'\r\nimport './index.scss'\r\n\r\ninterface Props {\r\n    isGameActive: boolean;\r\n}\r\n\r\ninterface ISquare {\r\n\r\n}\r\n\r\nexport default function GameBoard(props: Props): ReactElement {\r\n    const [squares, setSquares] = useState<any>([])\r\n    const testEnemy = useRef<null | HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        const mySquares = []\r\n        for (let i = 0; i < 128; i++) {\r\n            mySquares.push(0);\r\n        }\r\n        setSquares(mySquares)\r\n    }, [])\r\n\r\n    return (\r\n        <div className='game-board-wrapper-outer'>\r\n            <div className='game-board-wrapper-inner'>\r\n                {squares.map((square: any, i: number) => {\r\n                    return (\r\n                        <div className={`board-square${square === 1 ? ' img' : square === 2 ? ' img2' : ''}`} key={i}>\r\n\r\n                        </div>\r\n                    )\r\n                })}\r\n                <Turret \r\n                    isGameActive={props.isGameActive}\r\n                    enemy={testEnemy}/>\r\n                <div className='enemy' ref={testEnemy}></div>\r\n                {/* <GamePath /> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement } from 'react'\r\nimport './index.scss'\r\n\r\ninterface Props {\r\n    \r\n}\r\n\r\nexport default function GameMenu({}: Props): ReactElement {\r\n    return (\r\n        <div className='game-menu'>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { ReactElement, useState, useEffect } from 'react'\r\nimport { GameBoard, GameMenu } from '../../components'\r\nimport './index.scss'\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nexport default function Game({ }: Props): ReactElement {\r\n    const [isGameActive, setIsGameActive] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setIsGameActive(true);\r\n    }, [])\r\n\r\n    return (\r\n        <div className='game-page'>\r\n            <div className='game-flex-wrapper'>\r\n                <div className='flex-item game'>\r\n                    <GameBoard isGameActive={isGameActive}/>\r\n                </div>\r\n                <div className='flex-item menu'>\r\n                    <GameMenu />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Game } from './pages';\nimport './App.css';\nimport './reset.scss'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename='/covid-game'>\n        <Switch>\n          <Route exact path='/'>\n            <Game />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}